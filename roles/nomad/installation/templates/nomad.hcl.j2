{%- set network_interface_ipv4 = hostvars[inventory_hostname]['vagrant_ipv4'] | default(hostvars[inventory_hostname]['ansible_default_ipv4']['address']) -%}
datacenter = "{{ nomad_datacenter }}"
data_dir = "{{ nomad_data_dir }}"

bind_addr = "0.0.0.0"
advertise {
  http = "{{ network_interface_ipv4 }}:4646"
  rpc  = "{{ network_interface_ipv4 }}:4647"
  serf = "{{ network_interface_ipv4 }}:4648"
}

consul {
  address = "127.0.0.1:8500"

{% if nomad_mode == 'server' %}
  tags = [
    "controlplane",
    "traefik.enable=true",
    "traefik.http.routers.nomad.entrypoints=web",
    "traefik.http.services.nomad.loadbalancer.server.port=4646"
  ]
{% endif %}
}

{% if nomad_mode == 'server' %}
server {
  enabled = true
  # MUST be 16 bytes, Base64-encoded
  encrypt = "{{ lookup('password', '/tmp/nomadhash length=16') | b64encode }}"
  bootstrap_expect = {{ groups['controlplane'] | length }}
  server_join {
    retry_join = {{
      groups['controlplane'] | map('extract', hostvars, 'vagrant_ipv4') |
        default(groups['controlplane'] | map('extract', hostvars, ['ansible_default_ipv4', 'addres'])) |
        list |
        to_json }}
    retry_max = 3
    retry_interval = "15s"
  }
}
{% endif %}

{% if nomad_mode == 'client' %}
{# loopback interface is `lo` on Linux, but `lo0` on macOS/BSD #}
client {
  enabled = true
  network_interface = "{{ network_interface | default(ansible_interfaces | select('match', '^lo\d?') | first) }}"
}
{% endif %}

{% if nomad_cert_exists %}
tls {
  http = true
  rpc  = true

  ca_file   = "/etc/nomad.d/nomad-{{ nomad_mode }}-ca.crt"
  cert_file = "/etc/nomad.d/nomad-{{ nomad_mode }}.crt"
  key_file  = "/etc/nomad.d/nomad-{{ nomad_mode }}.key"

  verify_server_hostname = true
  verify_https_client    = true
}
{% endif %}

telemetry {
  collection_interval = "1s"
  disable_hostname = true
  prometheus_metrics = true
  publish_allocation_metrics = true
  publish_node_metrics = true
}

{% if vault_nomad_token is defined %}
{% if nomad_mode == 'server' %}
vault {
  enabled = true
  address = "http://vault:8200"
  task_token_ttl = "1h"
  create_from_role = "nomad-cluster"
  token = "{{ vault_nomad_token }}"
}
{% else %}
vault {
  enabled = true
  address = "http://vault:8200"
}
{% endif %}
{% endif %}
