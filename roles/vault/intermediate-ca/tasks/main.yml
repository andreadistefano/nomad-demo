---
- name: Enable intermediate PKI secret engine # noqa no-changed-when
  run_once: true
  ansible.builtin.command: |
    vault secrets enable
    -path=pki_int
    -description "Intermediate PKI secret storage"
    -max-lease-ttl=43800h
    pki
  register: _vault_pki_int_enable_result
  failed_when:
    - _vault_pki_int_enable_result.rc > 0
    - '"path is already in use" not in _vault_pki_int_enable_result.stderr'
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_root_token }}"

- name: Create intermediate CA CSR # noqa no-changed-when
  run_once: true
  ansible.builtin.command: |
    vault write -format=json
    pki_int/intermediate/generate/internal
    organization="{{ organization_name }}"
    common_name="{{ organization_name }} Intermediate CA"
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: vault_pki_int_csr

- name: Copy using inline content # noqa no-changed-when
  delegate_to: localhost
  become: no
  run_once: true
  ansible.builtin.copy:
    content: "{{ vault_pki_int_csr.stdout | from_json | json_query('data.csr') }}"
    dest: "{{ playbook_dir }}/certificates/pki_intermediate.csr"
    mode: 0600

# Ansible's `community.crypto.x509_certificate` doesn't support basic
# constraints, which are required to create an intermediate CA for Vault.
# See: https://discuss.hashicorp.com/t/error-setting-up-intermediate-ca/18070/4
- name: Sign the intermediate CA CSR # noqa no-changed-when
  delegate_to: localhost
  become: no
  run_once: true
  ansible.builtin.command: |
    openssl x509 -req
    -days {{ intermediate_ca_validity_days }}
    -in {{ playbook_dir }}/certificates/pki_intermediate.csr
    -CA {{ playbook_dir }}/certificates/root_ca.crt
    -CAkey {{ playbook_dir }}/certificates/root_ca.key
    -extfile {{ role_path }}/files/openssl_intermediate_ext.cnf
    -CAcreateserial
    -out {{ playbook_dir }}/certificates/pki_intermediate.crt

- name: Copy pki_intermediate.crt
  run_once: true
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/certificates/pki_intermediate.crt"
    dest: /etc/vault.d/pki_intermediate.crt
    mode: 0600

- name: Store intermediate CA certificate in Vault # noqa no-changed-when
  run_once: true
  ansible.builtin.command: |
    vault write
    pki_int/intermediate/set-signed
    certificate=@/etc/vault.d/pki_intermediate.crt
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_root_token }}"

- name: Set URL configuration # noqa no-changed-when
  run_once: true
  ansible.builtin.command: |
    vault write pki_int/config/urls
    issuing_certificates="{{ vault_addr }}/v1/pki_int/ca"
    crl_distribution_points="{{ vault_addr }}/v1/pki_int/crl"
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_root_token }}"

- name: Create Consul PKI role # noqa no-changed-when
  run_once: true
  ansible.builtin.command: |
    vault write pki_int/roles/{{ consul_datacenter | default('dc1') }}.consul
    allowed_domains="{{ consul_datacenter | default('dc1') }}.consul,service.consul"
    allow_subdomains=true
    max_ttl="{{ leaf_certificate_max_ttl_hours }}h"
    ttl="{{ leaf_certificate_ttl_hours }}h"
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_root_token }}"

- name: Create Nomad PKI role # noqa no-changed-when
  run_once: true
  ansible.builtin.command: |
    vault write pki_int/roles/{{ nomad_datacenter | default('dc1') }}.nomad
    allowed_domains="server.{{ nomad_datacenter | default('dc1') }}.nomad,client.{{ nomad_datacenter | default('dc1') }}.nomad,nomad.service.consul"
    allow_bare_domains=true
    max_ttl="{{ leaf_certificate_max_ttl_hours }}h"
    ttl="{{ leaf_certificate_ttl_hours }}h"
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_root_token }}"

# NOTE: Just for demo purposes, you probably want to get "proper" certificates
# for your public facing services, e.g. from Let's Encrypt.
# This can be setup in the Traefik loadbalancer instead
- name: "Create {{ domain }} PKI role" # noqa no-changed-when
  run_once: true
  ansible.builtin.command: |
    vault write pki_int/roles/{{ domain }}
    allowed_domains="{{ domain }}"
    allow_bare_domains=true
    allow_subdomains=true
    max_ttl="{{ leaf_certificate_max_ttl_hours }}h"
    ttl="{{ leaf_certificate_ttl_hours }}h"
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
